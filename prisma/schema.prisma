generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map(name: "user_id")
  type               String
  provider           String
  providerAccountId  String  @map(name: "provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "session")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  fingerprint      String?
  ip               String?
  user_agent       String?
  enrichment_limit Int?     @default(500)
  createdAt        DateTime @default(now()) @map(name: "created_at")
  updatedAt        DateTime @default(now()) @updatedAt @map(name: "updated_at")

  accounts Account[]
  sessions Session[]

  @@map(name: "users")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_token")
}

model CompanyEnrichment {
  id                          Int                     @id @default(autoincrement())
  domain                      String
  company_name                String?
  industry                    String?
  founded_at                  Int?
  linkedin_url                String?
  primary_location            String?
  twitter_url                 String?
  twitter_followers           String?
  estimated_annual_revenue    String?
  estimated_total_fund_raised BigInt?
  employee_size_range         String?
  tags                        Json?
  createdAt                   DateTime                @default(now()) @map(name: "created_at")
  updatedAt                   DateTime                @default(now()) @updatedAt @map(name: "updated_at")
  CompanyForFingerprint       CompanyForFingerprint[]

  @@unique([domain])
  @@map(name: "company_enrichment")
}

model CompanyForFingerprint {
  id          Int      @id @default(autoincrement())
  fingerprint String
  companyId   Int      @map(name: "company_id")
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map(name: "updated_at")

  company CompanyEnrichment @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@map(name: "company_for_fingerprint")
}
